// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  customer_id    String @id @default(uuid()) @db.Uuid
  customer_email String 
  password       String @db.VarChar(15)
  age            Int
  address        String @db.VarChar(40)
  phone_number   BigInt
  customer_name String 
  searchhistory         history[]
  review                review[]
  request request[]
}

model Serviceprovider {
  serviceprovider_id              String                   @id @default(uuid()) @db.Uuid
  serviceprovider_email           String                  
  password                        String                  
  age                             Int
  address                         String                 
  phone_number                   BigInt
  gstregistration_number          String                  
  chargers_for_particular_service Int
  specialisation                  String
 
  searchhistory                   history[]
  service                         service[]
  bookingserviceprovider          bookingserviceprovider[]
  viewingfeedbacks viewingfeedbacks[]
  request request[]
}

model service {
  service_name           String
  service_id             String                   @id @default(uuid()) @db.Uuid
  service                Serviceprovider          @relation(fields: [serviceprovider_id], references: [serviceprovider_id])
  serviceprovider_id     String                   @unique @db.Uuid
  searchhistory         history[]
  bookingserviceprovider bookingserviceprovider[]
  review                 review[]
  request request[]
 
}



model history {
  date               DateTime
  customer     Customer        @relation(fields: [customer_id], references: [customer_id])
  customer_id        String          @unique @db.Uuid
  search             Serviceprovider @relation(fields: [serviceprovider_id], references: [serviceprovider_id])
  serviceprovider_id String          @unique @db.Uuid
  searching          service         @relation(fields: [service_id], references: [service_id])
  service_id         String          @unique @db.Uuid
}

model bookingserviceprovider {
  book               Serviceprovider @relation(fields: [serviceprovider_id], references: [serviceprovider_id])
  serviceprovider_id String          @unique @db.Uuid
  booking_id         String
  booking            service         @relation(fields: [service_id], references: [service_id])
  service_id         String          @unique @db.Uuid
  date               DateTime
}

model review {
  customer       Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id    String   @unique @db.Uuid
  review_id      String   @id @default(uuid()) @db.Uuid
  service        service  @relation(fields: [service_id], references: [service_id])
  service_id     String   @unique @db.Uuid
  rating         Float
  review_content String
}

 model viewingfeedbacks{
  review_id Int @id @unique
  date DateTime
  customer_id String @unique
serviceprovider           Serviceprovider @relation(fields: [serviceprovider_id], references: [serviceprovider_id])
  serviceprovider_id String          @unique @db.Uuid

}
model request{
  
  booking_id Int @id @unique
  reasons_for_rejecting String
  date DateTime
  timeÂ DateTime
serviceprovider           Serviceprovider @relation(fields: [serviceprovider_id], references: [serviceprovider_id])
  serviceprovider_id String          @unique @db.Uuid
customer       Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id    String   @unique @db.Uuid
  service         service         @relation(fields: [service_id], references: [service_id])
  service_id         String          @unique @db.Uuid
}


